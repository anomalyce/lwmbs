name: linux test

on:
  workflow_dispatch:
  push:

jobs:
  source-fetch:
    name: Cache PHP ${{ matrix.php-version }} sources
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php-version: ["8.1", "8.0"]
      max-parallel: 2
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Update sources
        shell: bash
        id: src_upgrade
        run: |
          mkdir build
          printf '::set-output name=hash::'
          php fetch_source.php ./src.json ${{ matrix.php-version }} --hash
          echo

      - name: Cache sources
        uses: actions/cache@v3
        with:
          path: |
            build/src
            build/downloads
          # note: match this
          key: linux-src-v3-${{ steps.src_upgrade.outputs.hash }}

  cache:
    needs:
      - source-fetch
    name: Cache ${{ matrix.libc }} PHP ${{ matrix.php-version }} libraries
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php-version: ["8.1", "8.0"]
        libc: ['musl', 'glibc']
      max-parallel: 4
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Update sources
        shell: bash
        id: src_upgrade
        run: |
          mkdir build
          printf '::set-output name=hash::'
          php fetch_source.php ./src.json ${{ matrix.php-version }} --hash
          echo

      - name: Cache sources
        uses: actions/cache@v3
        with:
          path: |
            build/src
            build/downloads
          # note: match this
          key: linux-src-v3-${{ steps.src_upgrade.outputs.hash }}

      - name: Cache libs
        id: libs-cache
        uses: actions/cache@v3
        with:
          path: |
            build/lib
            build/include
          # note: match this
          key: linux-lib-${{ matrix.libc }}-v3-${{ steps.src_upgrade.outputs.hash }}

      - name: Prepare and fetch sources
        shell: bash
        if: steps.libs-cache.outputs.cache-hit != 'true'
        working-directory: build
        run: |
          sudo apt-get install -yy --no-install-recommends \
            bison re2c ${{ matrix.libc == 'musl' && 'musl musl-tools' || '' }}
          php ../fetch_source.php ../src.json ${{ matrix.php-version }} --shallow-clone

      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3

      - name: Build libraries
        shell: bash
        working-directory: build
        run: |
          php ../build_libs.php

  build:
    needs:
      - cache
    name: PHP ${{ matrix.php-version }} ${{ matrix.sapi }} ${{ matrix.libc }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php-version: ["8.1", "8.0"]
        sapi: ['cli', 'micro']
        libc: ['musl', 'glibc']
      max-parallel: 8
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Update sources
        shell: bash
        id: src_upgrade
        run: |
          mkdir build
          printf '::set-output name=hash::'
          php fetch_source.php ./src.json ${{ matrix.php-version }} --hash
          echo

      - name: Cache sources
        uses: actions/cache@v3
        with:
          path: |
            build/src
            build/downloads
          # note: match this
          key: linux-src-v3-${{ steps.src_upgrade.outputs.hash }}

      - name: Cache libs
        uses: actions/cache@v3
        with:
          path: |
            build/lib
            build/include
          # note: match this
          key: linux-lib-${{ matrix.libc }}-v3-${{ steps.src_upgrade.outputs.hash }}

      - name: Prepare and fetch sources
        shell: bash
        working-directory: build
        run: |
          sudo apt-get install -yy --no-install-recommends \
            bison re2c ${{ matrix.libc == 'musl' && 'musl musl-tools' || '' }}
          mkdir \
            ../${{ matrix.sapi }}_shared \
            ../${{ matrix.sapi }}_static
          php ../fetch_source.php ../src.json ${{ matrix.php-version }} --shallow-clone

      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3

      - name: Build ${{ matrix.sapi }}
        shell: bash
        working-directory: build
        run: |
          php ../build_${{ matrix.sapi }}.php
          if [ 'micro' = '${{ matrix.sapi }}' ]
          then
            cp src/php-src/sapi/micro/micro.sfx src/php-src/sapi/micro/micro.sfx.debug ../micro_shared
          else
            cp src/php-src/sapi/cli/php src/php-src/sapi/cli/php.debug ../cli_shared
          fi

      - name: Upload artifact for ${{ matrix.sapi }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.sapi }}_shared_${{ matrix.php-version }}_${{ matrix.libc }}_${{ steps.src_upgrade.outputs.hash }}
          path: |
            ${{ matrix.sapi }}_shared

      - name: Build ${{ matrix.sapi }} all-static
        shell: bash
        working-directory: build
        run: |
          php ../build_${{ matrix.sapi }}.php all-static
          if [ 'micro' = '${{ matrix.sapi }}' ]
          then
            cp src/php-src/sapi/micro/micro.sfx src/php-src/sapi/micro/micro.sfx.debug ../micro_static
          else
            cp src/php-src/sapi/cli/php src/php-src/sapi/cli/php.debug ../cli_static
          fi

      - name: Upload artifact for ${{ matrix.sapi }} static
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.sapi }}_static_${{ matrix.php-version }}_${{ matrix.libc }}_${{ steps.src_upgrade.outputs.hash }}
          path: |
            ${{ matrix.sapi }}_static

      - name: Remove php src to avoid cache
        shell: bash
        working-directory: build
        run: |
          rm -rf src/php-src
